╔══════════════════════════════════════════════════════════════════════════════╗
║                  HOW AXIOS FINDS DJANGO BACKEND - VISUAL GUIDE              ║
╚══════════════════════════════════════════════════════════════════════════════╝

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🔧 SCENARIO 1: LOCAL DEVELOPMENT (npm run dev)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

┌─────────────────────────────────────────────────────────────────────────────┐
│ STEP 1: Your Vue Component                                                 │
│ ─────────────────────────────                                              │
│                                                                             │
│   import { useProductStore } from '@/stores/products'                      │
│   const store = useProductStore()                                          │
│   store.fetchProducts()                                                     │
│                                                                             │
└────────────────────────────┬────────────────────────────────────────────────┘
                             │
                             ▼
┌─────────────────────────────────────────────────────────────────────────────┐
│ STEP 2: Pinia Store (stores/products.js)                                   │
│ ────────────────────────────────────────                                   │
│                                                                             │
│   import api from '@/services/api'                                         │
│   const response = await api.getProducts(params)                           │
│                                                                             │
└────────────────────────────┬────────────────────────────────────────────────┘
                             │
                             ▼
┌─────────────────────────────────────────────────────────────────────────────┐
│ STEP 3: API Service (services/api.js)                                      │
│ ─────────────────────────────────────                                      │
│                                                                             │
│   // Environment detection                                                 │
│   API_BASE_URL = 'http://127.0.0.1:8000'  (development mode)              │
│                                                                             │
│   // Axios instance                                                         │
│   apiClient.get('/products/', { params })                                  │
│                                                                             │
│   // Full URL becomes:                                                      │
│   GET http://127.0.0.1:8000/api/products/                                  │
│                                                                             │
└────────────────────────────┬────────────────────────────────────────────────┘
                             │
                             ▼
┌─────────────────────────────────────────────────────────────────────────────┐
│ STEP 4: Vite Dev Server Proxy (vite.config.js) ✨ NEW!                    │
│ ──────────────────────────────────────────────────────                     │
│                                                                             │
│   proxy: {                                                                  │
│     '/api': {                                                               │
│       target: 'http://127.0.0.1:8000',  ← Intercepts /api requests        │
│       changeOrigin: true                 ← Prevents CORS issues            │
│     }                                                                       │
│   }                                                                         │
│                                                                             │
│   Request: http://127.0.0.1:8000/api/products/                             │
│   Proxied to: http://127.0.0.1:8000/api/products/                          │
│                                                                             │
└────────────────────────────┬────────────────────────────────────────────────┘
                             │
                             ▼
┌─────────────────────────────────────────────────────────────────────────────┐
│ STEP 5: Django Backend (127.0.0.1:8000)                                    │
│ ───────────────────────────────────────                                    │
│                                                                             │
│   ✅ Receives: GET /api/products/                                          │
│   ✅ Django REST Framework processes request                               │
│   ✅ Returns: { results: [...products], count: 10 }                        │
│                                                                             │
└────────────────────────────┬────────────────────────────────────────────────┘
                             │
                             ▼
                    ┌────────────────┐
                    │  Response back │
                    │  to Vue App    │
                    └────────────────┘


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🐳 SCENARIO 2: DOCKER PRODUCTION (docker-compose up)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

┌─────────────────────────────────────────────────────────────────────────────┐
│ STEP 1: Your Browser                                                       │
│ ────────────────────                                                        │
│                                                                             │
│   URL: http://localhost/                                                   │
│   (Loads Vue.js app from frontend container)                               │
│                                                                             │
└────────────────────────────┬────────────────────────────────────────────────┘
                             │
                             ▼
┌─────────────────────────────────────────────────────────────────────────────┐
│ STEP 2: Vue App Makes API Call                                             │
│ ──────────────────────────────────                                         │
│                                                                             │
│   store.fetchProducts()                                                     │
│   → api.getProducts()                                                       │
│   → axios GET /api/products/                                                │
│                                                                             │
│   API_BASE_URL = '' (empty in production)                                  │
│   baseURL = '/api' (relative URL)                                          │
│                                                                             │
│   ✅ Request URL: /api/products/  (relative to current domain)             │
│                                                                             │
└────────────────────────────┬────────────────────────────────────────────────┘
                             │
                             ▼
┌─────────────────────────────────────────────────────────────────────────────┐
│ STEP 3: Nginx Container (Port 80)                                          │
│ ─────────────────────────────────────                                      │
│                                                                             │
│   📍 nginx/conf.d/default.conf                                             │
│                                                                             │
│   ┌─────────────────────────────────────────────────┐                      │
│   │ Routing Logic:                                  │                      │
│   │                                                 │                      │
│   │  ❓ Request path: /api/products/               │                      │
│   │                                                 │                      │
│   │  ✅ Matches: location /api/                     │                      │
│   │  ✅ Action: proxy_pass http://backend;          │                      │
│   │  ✅ Forwards to: backend:80/api/products/       │                      │
│   │                                                 │                      │
│   │  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━  │                      │
│   │                                                 │                      │
│   │  Other routing rules:                           │                      │
│   │  • /admin/*  → backend:80                       │                      │
│   │  • /media/*  → /var/www/media (volume)          │                      │
│   │  • /static/* → /var/www/static (volume)         │                      │
│   │  • /*        → frontend:80                      │                      │
│   │                                                 │                      │
│   └─────────────────────────────────────────────────┘                      │
│                                                                             │
└────────────────────────────┬────────────────────────────────────────────────┘
                             │
                             ▼
┌─────────────────────────────────────────────────────────────────────────────┐
│ STEP 4: Backend Container (backend:80)                                     │
│ ──────────────────────────────────────                                     │
│                                                                             │
│   Container Name: multivendor_backend                                      │
│   Internal Address: backend:80                                             │
│   Network: multivendor_network                                             │
│                                                                             │
│   ✅ Receives from Nginx: GET /api/products/                               │
│   ✅ Gunicorn → Django → DRF ViewSet                                       │
│   ✅ Database Query (PostgreSQL at db:5432)                                │
│   ✅ Returns JSON response                                                  │
│                                                                             │
└────────────────────────────┬────────────────────────────────────────────────┘
                             │
                             ▼
┌─────────────────────────────────────────────────────────────────────────────┐
│ STEP 5: Response Flows Back                                                │
│ ───────────────────────────────                                            │
│                                                                             │
│   Backend → Nginx → Browser → Vue App → Store → Component                 │
│                                                                             │
│   ✅ Response logged in console                                            │
│   ✅ Store state updated                                                    │
│   ✅ UI re-renders with data                                                │
│                                                                             │
└─────────────────────────────────────────────────────────────────────────────┘


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🔑 KEY CONFIGURATION FILES
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

┌──────────────────────────────────────────────────────────────────────┐
│ 1. services/api.js - Axios Configuration                            │
├──────────────────────────────────────────────────────────────────────┤
│                                                                      │
│   const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || (       │
│     import.meta.env.MODE === 'production'                           │
│       ? ''  ← Empty = relative URLs for Docker                      │
│       : 'http://127.0.0.1:8000'  ← Direct for local dev             │
│   )                                                                  │
│                                                                      │
│   const apiClient = axios.create({                                  │
│     baseURL: API_BASE_URL ? `${API_BASE_URL}/api` : '/api'          │
│   })                                                                 │
│                                                                      │
│   // Auto-attach auth token                                          │
│   apiClient.interceptors.request.use(config => {                    │
│     const token = localStorage.getItem('authToken')                 │
│     if (token) {                                                     │
│       config.headers.Authorization = `Token ${token}`               │
│     }                                                                │
│     return config                                                    │
│   })                                                                 │
│                                                                      │
└──────────────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────────────┐
│ 2. vite.config.js - Development Proxy ✨ NEW!                       │
├──────────────────────────────────────────────────────────────────────┤
│                                                                      │
│   server: {                                                          │
│     host: '0.0.0.0',                                                 │
│     port: 5173,                                                      │
│     proxy: {                                                         │
│       '/api': {                                                      │
│         target: 'http://127.0.0.1:8000',                            │
│         changeOrigin: true,  ← Prevents CORS                        │
│         secure: false                                                │
│       },                                                             │
│       '/media': { target: 'http://127.0.0.1:8000' },                │
│       '/admin': { target: 'http://127.0.0.1:8000' }                 │
│     }                                                                │
│   }                                                                  │
│                                                                      │
└──────────────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────────────┐
│ 3. nginx/conf.d/default.conf - Nginx Routing                        │
├──────────────────────────────────────────────────────────────────────┤
│                                                                      │
│   upstream backend {                                                 │
│     server backend:80;  ← Docker service name                       │
│   }                                                                  │
│                                                                      │
│   location /api/ {                                                   │
│     proxy_pass http://backend;  ← Routes to backend container       │
│     proxy_set_header Host $host;                                    │
│     proxy_set_header X-Real-IP $remote_addr;                        │
│   }                                                                  │
│                                                                      │
└──────────────────────────────────────────────────────────────────────┘

┌──────────────────────────────────────────────────────────────────────┐
│ 4. docker-compose.yml - Container Orchestration                     │
├──────────────────────────────────────────────────────────────────────┤
│                                                                      │
│   services:                                                          │
│     backend:                                                         │
│       expose: ["8000"]       ← Internal only                        │
│       networks: [multivendor_network]                               │
│                                                                      │
│     frontend:                                                        │
│       expose: ["80"]         ← Internal only                        │
│       networks: [multivendor_network]                               │
│                                                                      │
│     nginx:                                                           │
│       ports: ["80:80"]       ← Exposed to host                      │
│       networks: [multivendor_network]                               │
│                                                                      │
└──────────────────────────────────────────────────────────────────────┘


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📊 DOCKER NETWORK ARCHITECTURE
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

                         ┌─────────────────────┐
                         │   Internet/Browser  │
                         │   localhost:80      │
                         └──────────┬──────────┘
                                    │
                                    │ HTTP
                                    ▼
                    ┌───────────────────────────┐
                    │   Nginx Container         │
                    │   Port 80 (exposed)       │
                    │   ─────────────────────   │
                    │   • Reverse Proxy         │
                    │   • SSL Termination       │
                    │   • Static File Serving   │
                    └─┬───────────────────────┬─┘
                      │                       │
           ┌──────────┘                       └──────────┐
           │                                             │
           │ /api/*                                      │ /*
           ▼                                             ▼
┌──────────────────────┐                    ┌──────────────────────┐
│ Backend Container    │                    │ Frontend Container   │
│ backend:80           │                    │ frontend:80          │
│ ──────────────────── │                    │ ──────────────────── │
│ • Django             │                    │ • Nginx (static)     │
│ • Gunicorn           │                    │ • Vue.js build       │
│ • DRF API            │                    │ • index.html + JS    │
└────────┬─────────────┘                    └──────────────────────┘
         │
         │ Database queries
         ▼
┌──────────────────────┐
│ Database Container   │
│ db:5432              │
│ ──────────────────── │
│ • PostgreSQL 15      │
│ • Persistent volume  │
└──────────────────────┘

All containers on: multivendor_network (Docker bridge network)


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
✅ WHAT'S WORKING NOW
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

✅ Axios properly configured for both development and production
✅ Vite proxy eliminates CORS issues in local development
✅ Production uses relative URLs (Docker-friendly)
✅ Auth token automatically attached to requests
✅ All stores (auth, products, blog) using centralized API service
✅ Nginx correctly routes /api/* to backend container
✅ Request/response logging for easy debugging
✅ Docker containers communicate on internal network
✅ Only Nginx exposed to external traffic (security)
✅ Health checks configured for all services


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
🧪 QUICK TESTS
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

Local Development:
  npm run dev
  → Open http://localhost:5173
  → Check console for: "API Response: {...}"

Docker Production:
  docker-compose up --build
  → Open http://localhost
  → Check: docker logs multivendor_backend -f


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
📚 DOCUMENTATION
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📄 AXIOS_TO_DJANGO_CONNECTION_GUIDE.md - Detailed explanation
📄 AXIOS_QUICK_REFERENCE.md - Quick lookup
📄 AXIOS_SETUP_COMPLETE.md - Summary of changes
📄 HOW_AXIOS_FINDS_DJANGO.txt - This file (visual diagrams)


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🎉 Your axios integration is complete and production-ready!


