name: CI - Tests & Linting

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          cd multivendor_platform/multivendor_platform
          pip install -r ../../requirements.txt
          pip install coverage

      - name: Run Django tests with coverage
        env:
          DB_ENGINE: django.db.backends.postgresql
          DB_NAME: test_db
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_HOST: localhost
          DB_PORT: 5432
          SECRET_KEY: test-secret-key-for-ci-pipeline-only
          DEBUG: True
          ALLOWED_HOSTS: localhost,127.0.0.1
        run: |
          cd multivendor_platform/multivendor_platform
          coverage run --source='.' manage.py test --verbosity=2
          coverage report --fail-under=50
          coverage html

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: multivendor_platform/multivendor_platform/htmlcov/

      - name: Check for missing migrations
        env:
          DB_ENGINE: django.db.backends.postgresql
          DB_NAME: test_db
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_HOST: localhost
          DB_PORT: 5432
          SECRET_KEY: test-secret-key-for-ci-pipeline-only
          DEBUG: True
        run: |
          cd multivendor_platform/multivendor_platform
          python manage.py makemigrations --check --dry-run

  frontend-lint:
    name: Frontend Linting & Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: multivendor_platform/front_end/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          cd multivendor_platform/front_end
          npm install

      - name: Run linting
        run: |
          cd multivendor_platform/front_end
          npm run lint

      - name: Build frontend
        run: |
          cd multivendor_platform/front_end
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: multivendor_platform/front_end/dist/

